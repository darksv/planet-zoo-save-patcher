pub fn game_crc(data: &[u8]) -> u32 {
    let mut crc = 0u32;

    for i in 0..data.len() {
        let byte = data[i];
        crc = CRC_TABLE[((crc as u8) ^ byte) as usize] ^ (crc >> 8);
    }

    return crc;
}
/*
fn main() {
    println!("{:08X?}", CRC_TABLE);

    println!(
        "{:08x?}",
        hash(&[
            0x7B, 0x22, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E,
            0x22, 0x3A, 0x22, 0x22, 0x2C, 0x22, 0x62, 0x49, 0x73, 0x42, 0x6C, 0x75, 0x65, 0x70,
            0x72, 0x69, 0x6E, 0x74, 0x22, 0x3A, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x2C, 0x22, 0x6E,
            0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x22, 0x3A, 0x31, 0x35, 0x2C, 0x22, 0x74,
            0x54, 0x61, 0x67, 0x73, 0x22, 0x3A, 0x5B, 0x22, 0x5A, 0x6F, 0x6F, 0x22, 0x5D, 0x2C,
            0x22, 0x73, 0x4E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x5A, 0x6F, 0x6F, 0x20, 0x73,
            0xC5, 0x82, 0x6F, 0x6E, 0x65, 0x63, 0x7A, 0x6E, 0x65, 0x6A, 0x20, 0x72, 0x61, 0x64,
            0x6F, 0xC5, 0x9B, 0x63, 0x69, 0x20, 0x4D, 0x79, 0x65, 0x72, 0x73, 0x61, 0x22, 0x2C,
            0x22, 0x6E, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x4C, 0x43, 0x22,
            0x3A, 0x30, 0x2C, 0x22, 0x74, 0x44, 0x4C, 0x43, 0x4E, 0x61, 0x6D, 0x65, 0x73, 0x22,
            0x3A, 0x5B, 0x5D, 0x2C, 0x22, 0x73, 0x47, 0x61, 0x6D, 0x65, 0x56, 0x65, 0x72, 0x73,
            0x69, 0x6F, 0x6E, 0x22, 0x3A, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x2C, 0x22, 0x74, 0x53,
            0x61, 0x76, 0x65, 0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x47, 0x75, 0x65, 0x73, 0x74, 0x48,
            0x61, 0x70, 0x70, 0x69, 0x6E, 0x65, 0x73, 0x73, 0x22, 0x3A, 0x30, 0x2E, 0x38, 0x36,
            0x33, 0x37, 0x31, 0x36, 0x37, 0x38, 0x31, 0x31, 0x33, 0x39, 0x33, 0x37, 0x33, 0x37,
            0x37, 0x39, 0x33, 0x2C, 0x22, 0x6E, 0x4C, 0x6F, 0x6E, 0x67, 0x69, 0x74, 0x75, 0x64,
            0x65, 0x22, 0x3A, 0x30, 0x2E, 0x30, 0x2C, 0x22, 0x73, 0x47, 0x61, 0x6D, 0x65, 0x44,
            0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6C, 0x74, 0x79, 0x22, 0x3A, 0x22, 0x45, 0x61,
            0x73, 0x79, 0x22, 0x2C, 0x22, 0x6E, 0x4C, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
            0x22, 0x3A, 0x30, 0x2E, 0x30, 0x2C, 0x22, 0x6E, 0x43, 0x61, 0x73, 0x68, 0x22, 0x3A,
            0x39, 0x30, 0x35, 0x33, 0x38, 0x30, 0x2C, 0x22, 0x6E, 0x41, 0x6E, 0x69, 0x6D, 0x61,
            0x6C, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x22, 0x3A, 0x34, 0x31, 0x2C, 0x22, 0x73, 0x50,
            0x61, 0x72, 0x6B, 0x4E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x5A, 0x6F, 0x6F, 0x20,
            0x73, 0xC5, 0x82, 0x6F, 0x6E, 0x65, 0x63, 0x7A, 0x6E, 0x65, 0x6A, 0x20, 0x72, 0x61,
            0x64, 0x6F, 0xC5, 0x9B, 0x63, 0x69, 0x20, 0x4D, 0x79, 0x65, 0x72, 0x73, 0x61, 0x22,
            0x2C, 0x22, 0x6E, 0x50, 0x61, 0x72, 0x6B, 0x52, 0x61, 0x74, 0x69, 0x6E, 0x67, 0x22,
            0x3A, 0x30, 0x2E, 0x33, 0x36, 0x37, 0x39, 0x35, 0x33, 0x30, 0x33, 0x32, 0x32, 0x35,
            0x35, 0x31, 0x37, 0x32, 0x37, 0x32, 0x39, 0x34, 0x39, 0x2C, 0x22, 0x6E, 0x43, 0x6F,
            0x6E, 0x74, 0x69, 0x6E, 0x65, 0x6E, 0x74, 0x45, 0x6E, 0x75, 0x6D, 0x22, 0x3A, 0x32,
            0x2C, 0x22, 0x6E, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x22,
            0x3A, 0x38, 0x39, 0x35, 0x2C, 0x22, 0x73, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72, 0x69,
            0x6F, 0x43, 0x6F, 0x64, 0x65, 0x22, 0x3A, 0x22, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72,
            0x69, 0x6F, 0x5F, 0x30, 0x39, 0x22, 0x2C, 0x22, 0x73, 0x47, 0x61, 0x6D, 0x65, 0x4D,
            0x6F, 0x64, 0x65, 0x22, 0x3A, 0x22, 0x73, 0x63, 0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F,
            0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x22, 0x2C, 0x22, 0x73, 0x47, 0x65, 0x6F, 0x6D,
            0x65, 0x22, 0x3A, 0x22, 0x73, 0x63, 0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F, 0x30, 0x39,
            0x22, 0x2C, 0x22, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x22, 0x3A, 0x5B, 0x74, 0x72,
            0x75, 0x65, 0x2C, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x2C, 0x66, 0x61, 0x6C, 0x73, 0x65,
            0x5D, 0x7D, 0x7D,0x00
        ])
    );

    assert!(CRC_TABLE == make_game_crc_table());
}
*/
const fn make_game_crc_table() -> [u32; 256] {
    let mut i = 0usize;
    let mut out = [0u32; 256];
    while i < 0x100 {
        let mut x = i as u32;

        let mut j = 0;
        while j < 8 {
            if (x & 1) == 0 {
                x = (x >> 1);
            } else {
                x = (x >> 1) ^ 0xedb88320;
            }

            j += 1;
        }

        out[i] = x;
        i += 1;
    }

    out
}

const CRC_TABLE: [u32; 0x100] = make_game_crc_table();
